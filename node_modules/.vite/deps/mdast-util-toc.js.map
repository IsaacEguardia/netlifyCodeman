{
  "version": 3,
  "sources": ["../../github-slugger/regex.js", "../../github-slugger/index.js", "../../mdast-util-toc/lib/to-expression.js", "../../mdast-util-toc/lib/search.js", "../../@ungap/structured-clone/esm/types.js", "../../@ungap/structured-clone/esm/deserialize.js", "../../@ungap/structured-clone/esm/serialize.js", "../../@ungap/structured-clone/esm/index.js", "../../mdast-util-toc/lib/contents.js", "../../mdast-util-toc/lib/index.js"],
  "sourcesContent": ["// This module is generated by `script/`.\r\n/* eslint-disable no-control-regex, no-misleading-character-class, no-useless-escape */\r\nexport const regex = /[\\0-\\x1F!-,\\.\\/:-@\\[-\\^`\\{-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0378\\u0379\\u037E\\u0380-\\u0385\\u0387\\u038B\\u038D\\u03A2\\u03F6\\u0482\\u0530\\u0557\\u0558\\u055A-\\u055F\\u0589-\\u0590\\u05BE\\u05C0\\u05C3\\u05C6\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F3-\\u060F\\u061B-\\u061F\\u066A-\\u066D\\u06D4\\u06DD\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07F6-\\u07F9\\u07FB\\u07FC\\u07FE\\u07FF\\u082E-\\u083F\\u085C-\\u085F\\u086B-\\u089F\\u08B5\\u08C8-\\u08D2\\u08E2\\u0964\\u0965\\u0970\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09F2-\\u09FB\\u09FD\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A76-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF0-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B54\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B70\\u0B72-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BF0-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C7F\\u0C84\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D4F-\\u0D53\\u0D58-\\u0D5E\\u0D64\\u0D65\\u0D70-\\u0D79\\u0D80\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF4-\\u0E00\\u0E3B-\\u0E3F\\u0E4F\\u0E5A-\\u0E80\\u0E83\\u0E85\\u0E8B\\u0EA4\\u0EA6\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F48\\u0F6D-\\u0F70\\u0F85\\u0F98\\u0FBD-\\u0FC5\\u0FC7-\\u0FFF\\u104A-\\u104F\\u109E\\u109F\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u10FB\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u1360-\\u137F\\u1390-\\u139F\\u13F6\\u13F7\\u13FE-\\u1400\\u166D\\u166E\\u1680\\u169B-\\u169F\\u16EB-\\u16ED\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1735-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17D4-\\u17D6\\u17D8-\\u17DB\\u17DE\\u17DF\\u17EA-\\u180A\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u1945\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DA-\\u19FF\\u1A1C-\\u1A1F\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1AA6\\u1AA8-\\u1AAF\\u1AC1-\\u1AFF\\u1B4C-\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BF4-\\u1BFF\\u1C38-\\u1C3F\\u1C4A-\\u1C4C\\u1C7E\\u1C7F\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC0-\\u1CCF\\u1CD3\\u1CFB-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FBD\\u1FBF-\\u1FC1\\u1FC5\\u1FCD-\\u1FCF\\u1FD4\\u1FD5\\u1FDC-\\u1FDF\\u1FED-\\u1FF1\\u1FF5\\u1FFD-\\u203E\\u2041-\\u2053\\u2055-\\u2070\\u2072-\\u207E\\u2080-\\u208F\\u209D-\\u20CF\\u20F1-\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F-\\u215F\\u2189-\\u24B5\\u24EA-\\u2BFF\\u2C2F\\u2C5F\\u2CE5-\\u2CEA\\u2CF4-\\u2CFF\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D70-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E00-\\u2E2E\\u2E30-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u3040\\u3097\\u3098\\u309B\\u309C\\u30A0\\u30FB\\u3100-\\u3104\\u3130\\u318F-\\u319F\\u31C0-\\u31EF\\u3200-\\u33FF\\u4DC0-\\u4DFF\\u9FFD-\\u9FFF\\uA48D-\\uA4CF\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA62C-\\uA63F\\uA673\\uA67E\\uA6F2-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA7C0\\uA7C1\\uA7CB-\\uA7F4\\uA828-\\uA82B\\uA82D-\\uA83F\\uA874-\\uA87F\\uA8C6-\\uA8CF\\uA8DA-\\uA8DF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA954-\\uA95F\\uA97D-\\uA97F\\uA9C1-\\uA9CE\\uA9DA-\\uA9DF\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A-\\uAA5F\\uAA77-\\uAA79\\uAAC3-\\uAADA\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB5B\\uAB6A-\\uAB6F\\uABEB\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uE000-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB29\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBB2-\\uFBD2\\uFD3E-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFC-\\uFDFF\\uFE10-\\uFE1F\\uFE30-\\uFE32\\uFE35-\\uFE4C\\uFE50-\\uFE6F\\uFE75\\uFEFD-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF3E\\uFF40\\uFF5B-\\uFF65\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFFF]|\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDD3F\\uDD75-\\uDDFC\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEE1-\\uDEFF\\uDF20-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDF9F\\uDFC4-\\uDFC7\\uDFD0\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56-\\uDC5F\\uDC77-\\uDC7F\\uDC9F-\\uDCDF\\uDCF3\\uDCF6-\\uDCFF\\uDD16-\\uDD1F\\uDD3A-\\uDD7F\\uDDB8-\\uDDBD\\uDDC0-\\uDDFF\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE40-\\uDE5F\\uDE7D-\\uDE7F\\uDE9D-\\uDEBF\\uDEC8\\uDEE7-\\uDEFF\\uDF36-\\uDF3F\\uDF56-\\uDF5F\\uDF73-\\uDF7F\\uDF92-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCFF\\uDD28-\\uDD2F\\uDD3A-\\uDE7F\\uDEAA\\uDEAD-\\uDEAF\\uDEB2-\\uDEFF\\uDF1D-\\uDF26\\uDF28-\\uDF2F\\uDF51-\\uDFAF\\uDFC5-\\uDFDF\\uDFF7-\\uDFFF]|\\uD804[\\uDC47-\\uDC65\\uDC70-\\uDC7E\\uDCBB-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD40-\\uDD43\\uDD48-\\uDD4F\\uDD74\\uDD75\\uDD77-\\uDD7F\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDFF\\uDE12\\uDE38-\\uDE3D\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEA9-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A-\\uDC5D\\uDC62-\\uDC7F\\uDCC6\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDC1-\\uDDD7\\uDDDE-\\uDDFF\\uDE41-\\uDE43\\uDE45-\\uDE4F\\uDE5A-\\uDE7F\\uDEB9-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF3A-\\uDFFF]|\\uD806[\\uDC3B-\\uDC9F\\uDCEA-\\uDCFE\\uDD07\\uDD08\\uDD0A\\uDD0B\\uDD14\\uDD17\\uDD36\\uDD39\\uDD3A\\uDD44-\\uDD4F\\uDD5A-\\uDD9F\\uDDA8\\uDDA9\\uDDD8\\uDDD9\\uDDE2\\uDDE5-\\uDDFF\\uDE3F-\\uDE46\\uDE48-\\uDE4F\\uDE9A-\\uDE9C\\uDE9E-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC41-\\uDC4F\\uDC5A-\\uDC71\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF7-\\uDFAF\\uDFB1-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD824-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83D\\uD83F\\uD87B-\\uD87D\\uD87F\\uD885-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDECF\\uDEEE\\uDEEF\\uDEF5-\\uDEFF\\uDF37-\\uDF3F\\uDF44-\\uDF4F\\uDF5A-\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE80-\\uDEFF\\uDF4B-\\uDF4E\\uDF88-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2\\uDFE5-\\uDFEF\\uDFF2-\\uDFFF]|\\uD821[\\uDFF8-\\uDFFF]|\\uD823[\\uDCD6-\\uDCFF\\uDD09-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD4F\\uDD53-\\uDD63\\uDD68-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A-\\uDC9C\\uDC9F-\\uDFFF]|\\uD834[\\uDC00-\\uDD64\\uDD6A-\\uDD6C\\uDD73-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDE41\\uDE45-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3\\uDFCC\\uDFCD]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDCFF\\uDD2D-\\uDD2F\\uDD3E\\uDD3F\\uDD4A-\\uDD4D\\uDD4F-\\uDEBF\\uDEFA-\\uDFFF]|\\uD83A[\\uDCC5-\\uDCCF\\uDCD7-\\uDCFF\\uDD4C-\\uDD4F\\uDD5A-\\uDFFF]|\\uD83B[\\uDC00-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDFFF]|\\uD83C[\\uDC00-\\uDD2F\\uDD4A-\\uDD4F\\uDD6A-\\uDD6F\\uDD8A-\\uDFFF]|\\uD83E[\\uDC00-\\uDFEF\\uDFFA-\\uDFFF]|\\uD869[\\uDEDE-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uD884[\\uDF4B-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]/g\r\n", "import { regex } from './regex.js'\r\n\r\nconst own = Object.hasOwnProperty\r\n\r\n/**\r\n * Slugger.\r\n */\r\nexport default class BananaSlug {\r\n  /**\r\n   * Create a new slug class.\r\n   */\r\n  constructor () {\r\n    /** @type {Record<string, number>} */\r\n    // eslint-disable-next-line no-unused-expressions\r\n    this.occurrences\r\n\r\n    this.reset()\r\n  }\r\n\r\n  /**\r\n   * Generate a unique slug.\r\n  *\r\n  * Tracks previously generated slugs: repeated calls with the same value\r\n  * will result in different slugs.\r\n  * Use the `slug` function to get same slugs.\r\n   *\r\n   * @param  {string} value\r\n   *   String of text to slugify\r\n   * @param  {boolean} [maintainCase=false]\r\n   *   Keep the current case, otherwise make all lowercase\r\n   * @return {string}\r\n   *   A unique slug string\r\n   */\r\n  slug (value, maintainCase) {\r\n    const self = this\r\n    let result = slug(value, maintainCase === true)\r\n    const originalSlug = result\r\n\r\n    while (own.call(self.occurrences, result)) {\r\n      self.occurrences[originalSlug]++\r\n      result = originalSlug + '-' + self.occurrences[originalSlug]\r\n    }\r\n\r\n    self.occurrences[result] = 0\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Reset - Forget all previous slugs\r\n   *\r\n   * @return void\r\n   */\r\n  reset () {\r\n    this.occurrences = Object.create(null)\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a slug.\r\n *\r\n * Does not track previously generated slugs: repeated calls with the same value\r\n * will result in the exact same slug.\r\n * Use the `GithubSlugger` class to get unique slugs.\r\n *\r\n * @param  {string} value\r\n *   String of text to slugify\r\n * @param  {boolean} [maintainCase=false]\r\n *   Keep the current case, otherwise make all lowercase\r\n * @return {string}\r\n *   A unique slug string\r\n */\r\nexport function slug (value, maintainCase) {\r\n  if (typeof value !== 'string') return ''\r\n  if (!maintainCase) value = value.toLowerCase()\r\n  return value.replace(regex, '').replace(/ /g, '-')\r\n}\r\n", "/**\r\n * Transform a string into an applicable expression.\r\n *\r\n * @param {string} value\r\n * @returns {RegExp}\r\n */\r\nexport function toExpression(value) {\r\n  return new RegExp('^(' + value + ')$', 'i')\r\n}\r\n", "/**\r\n * @typedef {import('mdast').Heading} Heading\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('unist-util-is').Test} Test\r\n */\r\n\r\n/**\r\n * @typedef {Heading['depth']} Rank\r\n *\r\n */\r\n\r\n/**\r\n * @typedef SearchOptions\r\n *   Search configuration.\r\n * @property {Rank | null | undefined} [maxDepth=6]\r\n *   Maximum heading depth to include in the table of contents (default: `6`).\r\n *\r\n *   This is inclusive: when set to `3`, level three headings are included\r\n *   (those with three hashes, `###`).\r\n * @property {string | null | undefined} [skip]\r\n *   Headings to skip, wrapped in `new RegExp('^(' + value + ')$', 'i')`\r\n *   (default: `undefined`).\r\n *\r\n *   Any heading matching this expression will not be present in the table of\r\n *   contents.\r\n * @property {Test} [parents]\r\n *   Allow headings to be children of certain node types (default: the to `toc`\r\n *   given `tree`, to only allow top-level headings) (default:\r\n *   `d => d === tree`).\r\n *\r\n *   Internally, uses `unist-util-is` to check, so `parents` can be any\r\n *   `is`-compatible test.\r\n *\r\n * @typedef SearchEntry\r\n *   Entry.\r\n * @property {string} id\r\n *   ID of entry.\r\n * @property {Array<PhrasingContent>} children\r\n *   Contents of entry.\r\n * @property {Rank} depth\r\n *   Rank of entry.\r\n *\r\n * @typedef SearchResult\r\n *   Results.\r\n * @property {number} index\r\n *   Where the contents section starts, if looking for a heading.\r\n * @property {number} endIndex\r\n *   Where the contents section ends, if looking for a heading.\r\n * @property {Array<SearchEntry>} map\r\n *   List of entries.\r\n */\r\n\r\nimport Slugger from 'github-slugger'\r\nimport {toString} from 'mdast-util-to-string'\r\nimport {convert} from 'unist-util-is'\r\nimport {visit} from 'unist-util-visit'\r\nimport {toExpression} from './to-expression.js'\r\n\r\nconst slugs = new Slugger()\r\n\r\n/**\r\n * Search a node for a toc.\r\n *\r\n * @param {Nodes} root\r\n * @param {RegExp | undefined} expression\r\n * @param {SearchOptions} settings\r\n * @returns {SearchResult}\r\n */\r\nexport function search(root, expression, settings) {\r\n  const max = 'children' in root ? root.children.length : 0\r\n  const skip = settings.skip ? toExpression(settings.skip) : undefined\r\n  const parents = convert(\r\n    settings.parents ||\r\n      function (d) {\r\n        return d === root\r\n      }\r\n  )\r\n  /** @type {Array<SearchEntry>} */\r\n  const map = []\r\n  /** @type {number | undefined} */\r\n  let index\r\n  /** @type {number | undefined} */\r\n  let endIndex\r\n  /** @type {Heading | undefined} */\r\n  let opening\r\n\r\n  slugs.reset()\r\n\r\n  // Visit all headings in `root`.  We `slug` all headings (to account for\r\n  // duplicates), but only create a TOC from top-level headings (by default).\r\n  visit(root, 'heading', function (node, position, parent) {\r\n    const value = toString(node, {includeImageAlt: false})\r\n    /** @type {string} */\r\n    // @ts-expect-error `hProperties` from <https://github.com/syntax-tree/mdast-util-to-hast>\r\n    const id = node.data && node.data.hProperties && node.data.hProperties.id\r\n    const slug = slugs.slug(id || value)\r\n\r\n    if (!parents(parent)) {\r\n      return\r\n    }\r\n\r\n    // Our opening heading.\r\n    if (\r\n      position !== undefined &&\r\n      expression &&\r\n      !index &&\r\n      expression.test(value)\r\n    ) {\r\n      index = position + 1\r\n      opening = node\r\n      return\r\n    }\r\n\r\n    // Our closing heading.\r\n    if (\r\n      position !== undefined &&\r\n      opening &&\r\n      !endIndex &&\r\n      node.depth <= opening.depth\r\n    ) {\r\n      endIndex = position\r\n    }\r\n\r\n    // A heading after the closing (if we were looking for one).\r\n    if (\r\n      (endIndex || !expression) &&\r\n      (!settings.maxDepth || node.depth <= settings.maxDepth) &&\r\n      (!skip || !skip.test(value))\r\n    ) {\r\n      map.push({depth: node.depth, children: node.children, id: slug})\r\n    }\r\n  })\r\n\r\n  return {\r\n    index: index === undefined ? -1 : index,\r\n    endIndex: index === undefined ? -1 : endIndex || max,\r\n    map\r\n  }\r\n}\r\n", "export const VOID       = -1;\r\nexport const PRIMITIVE  = 0;\r\nexport const ARRAY      = 1;\r\nexport const OBJECT     = 2;\r\nexport const DATE       = 3;\r\nexport const REGEXP     = 4;\r\nexport const MAP        = 5;\r\nexport const SET        = 6;\r\nexport const ERROR      = 7;\r\nexport const BIGINT     = 8;\r\n// export const SYMBOL = 9;\r\n", "import {\r\n  VOID, PRIMITIVE,\r\n  ARRAY, OBJECT,\r\n  DATE, REGEXP, MAP, SET,\r\n  ERROR, BIGINT\r\n} from './types.js';\r\n\r\nconst env = typeof self === 'object' ? self : globalThis;\r\n\r\nconst deserializer = ($, _) => {\r\n  const as = (out, index) => {\r\n    $.set(index, out);\r\n    return out;\r\n  };\r\n\r\n  const unpair = index => {\r\n    if ($.has(index))\r\n      return $.get(index);\r\n\r\n    const [type, value] = _[index];\r\n    switch (type) {\r\n      case PRIMITIVE:\r\n      case VOID:\r\n        return as(value, index);\r\n      case ARRAY: {\r\n        const arr = as([], index);\r\n        for (const index of value)\r\n          arr.push(unpair(index));\r\n        return arr;\r\n      }\r\n      case OBJECT: {\r\n        const object = as({}, index);\r\n        for (const [key, index] of value)\r\n          object[unpair(key)] = unpair(index);\r\n        return object;\r\n      }\r\n      case DATE:\r\n        return as(new Date(value), index);\r\n      case REGEXP: {\r\n        const {source, flags} = value;\r\n        return as(new RegExp(source, flags), index);\r\n      }\r\n      case MAP: {\r\n        const map = as(new Map, index);\r\n        for (const [key, index] of value)\r\n          map.set(unpair(key), unpair(index));\r\n        return map;\r\n      }\r\n      case SET: {\r\n        const set = as(new Set, index);\r\n        for (const index of value)\r\n          set.add(unpair(index));\r\n        return set;\r\n      }\r\n      case ERROR: {\r\n        const {name, message} = value;\r\n        return as(new env[name](message), index);\r\n      }\r\n      case BIGINT:\r\n        return as(BigInt(value), index);\r\n      case 'BigInt':\r\n        return as(Object(BigInt(value)), index);\r\n    }\r\n    return as(new env[type](value), index);\r\n  };\r\n\r\n  return unpair;\r\n};\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns a deserialized value from a serialized array of Records.\r\n * @param {Record[]} serialized a previously serialized value.\r\n * @returns {any}\r\n */\r\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\r\n", "import {\r\n  VOID, PRIMITIVE,\r\n  ARRAY, OBJECT,\r\n  DATE, REGEXP, MAP, SET,\r\n  ERROR, BIGINT\r\n} from './types.js';\r\n\r\nconst EMPTY = '';\r\n\r\nconst {toString} = {};\r\nconst {keys} = Object;\r\n\r\nconst typeOf = value => {\r\n  const type = typeof value;\r\n  if (type !== 'object' || !value)\r\n    return [PRIMITIVE, type];\r\n\r\n  const asString = toString.call(value).slice(8, -1);\r\n  switch (asString) {\r\n    case 'Array':\r\n      return [ARRAY, EMPTY];\r\n    case 'Object':\r\n      return [OBJECT, EMPTY];\r\n    case 'Date':\r\n      return [DATE, EMPTY];\r\n    case 'RegExp':\r\n      return [REGEXP, EMPTY];\r\n    case 'Map':\r\n      return [MAP, EMPTY];\r\n    case 'Set':\r\n      return [SET, EMPTY];\r\n  }\r\n\r\n  if (asString.includes('Array'))\r\n    return [ARRAY, asString];\r\n\r\n  if (asString.includes('Error'))\r\n    return [ERROR, asString];\r\n\r\n  return [OBJECT, asString];\r\n};\r\n\r\nconst shouldSkip = ([TYPE, type]) => (\r\n  TYPE === PRIMITIVE &&\r\n  (type === 'function' || type === 'symbol')\r\n);\r\n\r\nconst serializer = (strict, json, $, _) => {\r\n\r\n  const as = (out, value) => {\r\n    const index = _.push(out) - 1;\r\n    $.set(value, index);\r\n    return index;\r\n  };\r\n\r\n  const pair = value => {\r\n    if ($.has(value))\r\n      return $.get(value);\r\n\r\n    let [TYPE, type] = typeOf(value);\r\n    switch (TYPE) {\r\n      case PRIMITIVE: {\r\n        let entry = value;\r\n        switch (type) {\r\n          case 'bigint':\r\n            TYPE = BIGINT;\r\n            entry = value.toString();\r\n            break;\r\n          case 'function':\r\n          case 'symbol':\r\n            if (strict)\r\n              throw new TypeError('unable to serialize ' + type);\r\n            entry = null;\r\n            break;\r\n          case 'undefined':\r\n            return as([VOID], value);\r\n        }\r\n        return as([TYPE, entry], value);\r\n      }\r\n      case ARRAY: {\r\n        if (type)\r\n          return as([type, [...value]], value);\r\n  \r\n        const arr = [];\r\n        const index = as([TYPE, arr], value);\r\n        for (const entry of value)\r\n          arr.push(pair(entry));\r\n        return index;\r\n      }\r\n      case OBJECT: {\r\n        if (type) {\r\n          switch (type) {\r\n            case 'BigInt':\r\n              return as([type, value.toString()], value);\r\n            case 'Boolean':\r\n            case 'Number':\r\n            case 'String':\r\n              return as([type, value.valueOf()], value);\r\n          }\r\n        }\r\n\r\n        if (json && ('toJSON' in value))\r\n          return pair(value.toJSON());\r\n\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const key of keys(value)) {\r\n          if (strict || !shouldSkip(typeOf(value[key])))\r\n            entries.push([pair(key), pair(value[key])]);\r\n        }\r\n        return index;\r\n      }\r\n      case DATE:\r\n        return as([TYPE, value.toISOString()], value);\r\n      case REGEXP: {\r\n        const {source, flags} = value;\r\n        return as([TYPE, {source, flags}], value);\r\n      }\r\n      case MAP: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const [key, entry] of value) {\r\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\r\n            entries.push([pair(key), pair(entry)]);\r\n        }\r\n        return index;\r\n      }\r\n      case SET: {\r\n        const entries = [];\r\n        const index = as([TYPE, entries], value);\r\n        for (const entry of value) {\r\n          if (strict || !shouldSkip(typeOf(entry)))\r\n            entries.push(pair(entry));\r\n        }\r\n        return index;\r\n      }\r\n    }\r\n\r\n    const {message} = value;\r\n    return as([TYPE, {name: type, message}], value);\r\n  };\r\n\r\n  return pair;\r\n};\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} value a serializable value.\r\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\r\n *  if `true`, will not throw errors on incompatible types, and behave more\r\n *  like JSON stringify would behave. Symbol and Function will be discarded.\r\n * @returns {Record[]}\r\n */\r\n export const serialize = (value, {json, lossy} = {}) => {\r\n  const _ = [];\r\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\r\n};\r\n", "import {deserialize} from './deserialize.js';\r\nimport {serialize} from './serialize.js';\r\n\r\n/**\r\n * @typedef {Array<string,any>} Record a type representation\r\n */\r\n\r\n/**\r\n * Returns an array of serialized Records.\r\n * @param {any} any a serializable value.\r\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\r\n * a transfer option (ignored when polyfilled) and/or non standard fields that\r\n * fallback to the polyfill if present.\r\n * @returns {Record[]}\r\n */\r\nexport default typeof structuredClone === \"function\" ?\r\n  /* c8 ignore start */\r\n  (any, options) => (\r\n    options && ('json' in options || 'lossy' in options) ?\r\n      deserialize(serialize(any, options)) : structuredClone(any)\r\n  ) :\r\n  (any, options) => deserialize(serialize(any, options));\r\n  /* c8 ignore stop */\r\n\r\nexport {deserialize, serialize};\r\n", "/**\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').ListItem} ListItem\r\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\r\n * @typedef {import('./search.js').SearchEntry} SearchEntry\r\n */\r\n\r\n/**\r\n * @typedef ContentsOptions\r\n *   Build configuration.\r\n * @property {boolean | null | undefined} [tight=false]\r\n *   Whether to compile list items tightly (default: `false`).\r\n * @property {boolean | null | undefined} [ordered=false]\r\n *   Whether to compile list items as an ordered list, otherwise they are\r\n *   unordered (default: `false`).\r\n * @property {string | null | undefined} [prefix=undefined]\r\n *   Add a prefix to links to headings in the table of contents (default:\r\n *   `undefined`).\r\n *\r\n *   Useful for example when later going from mdast to hast and sanitizing with\r\n *   `hast-util-sanitize`.\r\n */\r\n\r\nimport structuredClone from '@ungap/structured-clone'\r\n\r\n/**\r\n * Transform a list of heading objects to a markdown list.\r\n *\r\n * @param {Array<SearchEntry>} map\r\n * @param {ContentsOptions} settings\r\n */\r\nexport function contents(map, settings) {\r\n  const {ordered = false, tight = false, prefix} = settings\r\n  /** @type {List} */\r\n  const table = {type: 'list', ordered, spread: false, children: []}\r\n  let minDepth = Number.POSITIVE_INFINITY\r\n  let index = -1\r\n\r\n  // Find minimum depth.\r\n  while (++index < map.length) {\r\n    if (map[index].depth < minDepth) {\r\n      minDepth = map[index].depth\r\n    }\r\n  }\r\n\r\n  // Normalize depth.\r\n  index = -1\r\n\r\n  while (++index < map.length) {\r\n    map[index].depth -= minDepth - 1\r\n  }\r\n\r\n  // Add TOC to list.\r\n  index = -1\r\n\r\n  while (++index < map.length) {\r\n    insert(map[index], table, {ordered, tight, prefix})\r\n  }\r\n\r\n  return table\r\n}\r\n\r\n/**\r\n * Insert an entry into `parent`.\r\n *\r\n * @param {SearchEntry} entry\r\n * @param {List | ListItem} parent\r\n * @param {ContentsOptions} settings\r\n */\r\nfunction insert(entry, parent, settings) {\r\n  let index = -1\r\n  const tail = parent.children[parent.children.length - 1]\r\n\r\n  if (parent.type === 'list') {\r\n    if (entry.depth === 1) {\r\n      parent.children.push({\r\n        type: 'listItem',\r\n        spread: false,\r\n        children: [\r\n          {\r\n            type: 'paragraph',\r\n            children: [\r\n              {\r\n                type: 'link',\r\n                title: null,\r\n                url: '#' + (settings.prefix || '') + entry.id,\r\n                children: all(entry.children)\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      })\r\n    } else if (parent.children.length > 0) {\r\n      const tail = parent.children[parent.children.length - 1]\r\n      insert(entry, tail, settings)\r\n    } else {\r\n      /** @type {ListItem} */\r\n      const item = {type: 'listItem', spread: false, children: []}\r\n      parent.children.push(item)\r\n      insert(entry, item, settings)\r\n    }\r\n  }\r\n  // List item.\r\n  else if (tail && tail.type === 'list') {\r\n    entry.depth--\r\n    insert(entry, tail, settings)\r\n  } else {\r\n    /** @type {List} */\r\n    const item = {\r\n      type: 'list',\r\n      ordered: settings.ordered,\r\n      spread: false,\r\n      children: []\r\n    }\r\n    parent.children.push(item)\r\n    entry.depth--\r\n    insert(entry, item, settings)\r\n  }\r\n\r\n  if (parent.type === 'list' && !settings.tight) {\r\n    parent.spread = false\r\n\r\n    while (++index < parent.children.length) {\r\n      if (parent.children[index].children.length > 1) {\r\n        parent.spread = true\r\n        break\r\n      }\r\n    }\r\n  } else {\r\n    parent.spread = !settings.tight\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<PhrasingContent>} nodes\r\n * @returns {Array<PhrasingContent>}\r\n */\r\nfunction all(nodes) {\r\n  /** @type {Array<PhrasingContent>} */\r\n  const results = []\r\n  let index = -1\r\n\r\n  while (++index < nodes.length) {\r\n    const result = one(nodes[index])\r\n\r\n    if (Array.isArray(result)) {\r\n      results.push(...result)\r\n    } else {\r\n      results.push(result)\r\n    }\r\n  }\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n * @param {PhrasingContent} node\r\n * @returns {Array<PhrasingContent> | PhrasingContent}\r\n */\r\nfunction one(node) {\r\n  if (node.type === 'footnoteReference') {\r\n    return []\r\n  }\r\n\r\n  if (node.type === 'link' || node.type === 'linkReference') {\r\n    return all(node.children)\r\n  }\r\n\r\n  if ('children' in node) {\r\n    const {children, position, ...copy} = node\r\n    return Object.assign(structuredClone(copy), {\r\n      children: all(node.children)\r\n    })\r\n  }\r\n\r\n  const {position, ...copy} = node\r\n  return structuredClone(copy)\r\n}\r\n", "/**\r\n * @typedef {import('mdast').List} List\r\n * @typedef {import('mdast').Nodes} Nodes\r\n * @typedef {import('./search.js').SearchOptions} SearchOptions\r\n * @typedef {import('./contents.js').ContentsOptions} ContentsOptions\r\n */\r\n\r\n/**\r\n * @typedef {ContentsOptions & ExtraOptions & SearchOptions} Options\r\n *\r\n * @typedef ExtraOptions\r\n *   Extra configuration fields.\r\n * @property {string | null | undefined} [heading]\r\n *   Heading to look for, wrapped in `new RegExp('^(' + value + ')$', 'i')`\r\n *   (default: `undefined`).\r\n *\r\n * @typedef Result\r\n *   Results.\r\n * @property {number | undefined} index\r\n *   Index of the node right after the table of contents heading, `-1` if no\r\n *   heading was found, `undefined` if no `heading` was given.\r\n * @property {number | undefined} endIndex\r\n *   Index of the first node after `heading` that is not part of its section,\r\n *   `-1` if no heading was found, `undefined` if no `heading` was given, same\r\n *   as `index` if there are no nodes between `heading` and the first heading\r\n *   in the table of contents.\r\n * @property {List | undefined} map\r\n *   List representing the generated table of contents, `undefined` if no table\r\n *   of contents could be created, either because no heading was found or\r\n *   because no following headings were found.\r\n */\r\n\r\nimport {search} from './search.js'\r\nimport {contents} from './contents.js'\r\nimport {toExpression} from './to-expression.js'\r\n\r\n/**\r\n * Generate a table of contents from `tree`.\r\n *\r\n * Looks for the first heading matching `options.heading` (case insensitive) and\r\n * returns a table of contents (a list) for all following headings.\r\n * If no `heading` is specified, creates a table of contents for all headings in\r\n * `tree`.\r\n * `tree` is not changed.\r\n *\r\n * Links in the list to headings are based on GitHub’s style.\r\n * Only top-level headings (those not in blockquotes or lists), are used.\r\n * This default behavior can be changed by passing `options.parents`.\r\n *\r\n * @param {Nodes} tree\r\n *   Tree to search and generate from.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {Result}\r\n *   Results.\r\n */\r\nexport function toc(tree, options) {\r\n  const settings = options || {}\r\n  const heading = settings.heading ? toExpression(settings.heading) : undefined\r\n  const result = search(tree, heading, settings)\r\n\r\n  return {\r\n    index: heading ? result.index : undefined,\r\n    endIndex: heading ? result.endIndex : undefined,\r\n    map: result.map.length > 0 ? contents(result.map, settings) : undefined\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["self", "slug", "index", "toString", "tail", "position", "copy"]
}
