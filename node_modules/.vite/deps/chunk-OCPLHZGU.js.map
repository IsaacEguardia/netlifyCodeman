{
  "version": 3,
  "sources": ["../../unist-util-is/lib/index.js", "../../unist-util-visit-parents/lib/color.js", "../../unist-util-visit-parents/lib/index.js", "../../unist-util-visit/lib/index.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('unist').Node} Node\r\n * @typedef {import('unist').Parent} Parent\r\n */\r\n\r\n/**\r\n * @template Fn\r\n * @template Fallback\r\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\r\n */\r\n\r\n/**\r\n * @callback Check\r\n *   Check that an arbitrary value is a node.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {unknown} [node]\r\n *   Anything (typically a node).\r\n * @param {number | null | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean}\r\n *   Whether this is a node and passes a test.\r\n *\r\n * @typedef {Record<string, unknown> | Node} Props\r\n *   Object to check for equivalence.\r\n *\r\n *   Note: `Node` is included as it is common but is not indexable.\r\n *\r\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\r\n *   Check for an arbitrary node.\r\n *\r\n * @callback TestFunction\r\n *   Check if a node passes a test.\r\n * @param {unknown} this\r\n *   The given context.\r\n * @param {Node} node\r\n *   A node.\r\n * @param {number | undefined} [index]\r\n *   The node’s position in its parent.\r\n * @param {Parent | undefined} [parent]\r\n *   The node’s parent.\r\n * @returns {boolean | undefined | void}\r\n *   Whether this node passes the test.\r\n *\r\n *   Note: `void` is included until TS sees no return as `undefined`.\r\n */\r\n\r\n/**\r\n * Check if `node` is a `Node` and whether it passes the given test.\r\n *\r\n * @param {unknown} node\r\n *   Thing to check, typically `Node`.\r\n * @param {Test} test\r\n *   A check for a specific node.\r\n * @param {number | null | undefined} index\r\n *   The node’s position in its parent.\r\n * @param {Parent | null | undefined} parent\r\n *   The node’s parent.\r\n * @param {unknown} context\r\n *   Context object (`this`) to pass to `test` functions.\r\n * @returns {boolean}\r\n *   Whether `node` is a node and passes a test.\r\n */\r\nexport const is =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((node?: null | undefined) => false) &\r\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {unknown} [node]\r\n     * @param {Test} [test]\r\n     * @param {number | null | undefined} [index]\r\n     * @param {Parent | null | undefined} [parent]\r\n     * @param {unknown} [context]\r\n     * @returns {boolean}\r\n     */\r\n    // eslint-disable-next-line max-params\r\n    function (node, test, index, parent, context) {\r\n      const check = convert(test)\r\n\r\n      if (\r\n        index !== undefined &&\r\n        index !== null &&\r\n        (typeof index !== 'number' ||\r\n          index < 0 ||\r\n          index === Number.POSITIVE_INFINITY)\r\n      ) {\r\n        throw new Error('Expected positive finite index')\r\n      }\r\n\r\n      if (\r\n        parent !== undefined &&\r\n        parent !== null &&\r\n        (!is(parent) || !parent.children)\r\n      ) {\r\n        throw new Error('Expected parent node')\r\n      }\r\n\r\n      if (\r\n        (parent === undefined || parent === null) !==\r\n        (index === undefined || index === null)\r\n      ) {\r\n        throw new Error('Expected both parent and index')\r\n      }\r\n\r\n      return looksLikeANode(node)\r\n        ? check.call(context, node, index, parent)\r\n        : false\r\n    }\r\n  )\r\n\r\n/**\r\n * Generate an assertion from a test.\r\n *\r\n * Useful if you’re going to test many nodes, for example when creating a\r\n * utility where something else passes a compatible test.\r\n *\r\n * The created function is a bit faster because it expects valid input only:\r\n * a `node`, `index`, and `parent`.\r\n *\r\n * @param {Test} test\r\n *   *   when nullish, checks if `node` is a `Node`.\r\n *   *   when `string`, works like passing `(node) => node.type === test`.\r\n *   *   when `function` checks if function passed the node is true.\r\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\r\n *   *   when `array`, checks if any one of the subtests pass.\r\n * @returns {Check}\r\n *   An assertion.\r\n */\r\nexport const convert =\r\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\r\n  /**\r\n   * @type {(\r\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\r\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\r\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\r\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\r\n   *   ((test?: Test) => Check)\r\n   * )}\r\n   */\r\n  (\r\n    /**\r\n     * @param {Test} [test]\r\n     * @returns {Check}\r\n     */\r\n    function (test) {\r\n      if (test === null || test === undefined) {\r\n        return ok\r\n      }\r\n\r\n      if (typeof test === 'function') {\r\n        return castFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'object') {\r\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\r\n      }\r\n\r\n      if (typeof test === 'string') {\r\n        return typeFactory(test)\r\n      }\r\n\r\n      throw new Error('Expected function, string, or object as test')\r\n    }\r\n  )\r\n\r\n/**\r\n * @param {Array<Props | TestFunction | string>} tests\r\n * @returns {Check}\r\n */\r\nfunction anyFactory(tests) {\r\n  /** @type {Array<Check>} */\r\n  const checks = []\r\n  let index = -1\r\n\r\n  while (++index < tests.length) {\r\n    checks[index] = convert(tests[index])\r\n  }\r\n\r\n  return castFactory(any)\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {TestFunction}\r\n   */\r\n  function any(...parameters) {\r\n    let index = -1\r\n\r\n    while (++index < checks.length) {\r\n      if (checks[index].apply(this, parameters)) return true\r\n    }\r\n\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * Turn an object into a test for a node with a certain fields.\r\n *\r\n * @param {Props} check\r\n * @returns {Check}\r\n */\r\nfunction propsFactory(check) {\r\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\r\n\r\n  return castFactory(all)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   * @returns {boolean}\r\n   */\r\n  function all(node) {\r\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\r\n      /** @type {unknown} */ (node)\r\n    )\r\n\r\n    /** @type {string} */\r\n    let key\r\n\r\n    for (key in check) {\r\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a string into a test for a node with a certain type.\r\n *\r\n * @param {string} check\r\n * @returns {Check}\r\n */\r\nfunction typeFactory(check) {\r\n  return castFactory(type)\r\n\r\n  /**\r\n   * @param {Node} node\r\n   */\r\n  function type(node) {\r\n    return node && node.type === check\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a custom test into a test for a node that passes that test.\r\n *\r\n * @param {TestFunction} testFunction\r\n * @returns {Check}\r\n */\r\nfunction castFactory(testFunction) {\r\n  return check\r\n\r\n  /**\r\n   * @this {unknown}\r\n   * @type {Check}\r\n   */\r\n  function check(value, index, parent) {\r\n    return Boolean(\r\n      looksLikeANode(value) &&\r\n        testFunction.call(\r\n          this,\r\n          value,\r\n          typeof index === 'number' ? index : undefined,\r\n          parent || undefined\r\n        )\r\n    )\r\n  }\r\n}\r\n\r\nfunction ok() {\r\n  return true\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is Node}\r\n */\r\nfunction looksLikeANode(value) {\r\n  return value !== null && typeof value === 'object' && 'type' in value\r\n}\r\n", "/**\r\n * @param {string} d\r\n * @returns {string}\r\n */\r\nexport function color(d) {\r\n  return d\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} UnistNode\r\n * @typedef {import('unist').Parent} UnistParent\r\n */\r\n\r\n/**\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Fn extends (value: any) => value is infer Thing\r\n *   ? Thing\r\n *   : Fallback\r\n * )} Predicate\r\n *   Get the value of a type guard `Fn`.\r\n * @template Fn\r\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\r\n * @template Fallback\r\n *   Value to yield if `Fn` is not a type guard.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends null | undefined // No test.\r\n *   ? Value\r\n *   : Value extends {type: Check} // String (type) test.\r\n *   ? Value\r\n *   : Value extends Check // Partial test.\r\n *   ? Value\r\n *   : Check extends Function // Function test.\r\n *   ? Predicate<Check, Value> extends Value\r\n *     ? Predicate<Check, Value>\r\n *     : never\r\n *   : never // Some other test?\r\n * )} MatchesOne\r\n *   Check whether a node matches a primitive check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends Array<any>\r\n *   ? MatchesOne<Value, Check[keyof Check]>\r\n *   : MatchesOne<Value, Check>\r\n * )} Matches\r\n *   Check whether a node matches a check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test.\r\n */\r\n\r\n/**\r\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\r\n *   Number; capped reasonably.\r\n */\r\n\r\n/**\r\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\r\n *   Increment a number in the type system.\r\n * @template {Uint} [I=0]\r\n *   Index.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Node extends UnistParent\r\n *   ? Node extends {children: Array<infer Children>}\r\n *     ? Child extends Children ? Node : never\r\n *     : never\r\n *   : never\r\n * )} InternalParent\r\n *   Collect nodes that can be parents of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\r\n *   Collect nodes in `Tree` that can be parents of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Depth extends Max\r\n *   ? never\r\n *   :\r\n *     | InternalParent<Node, Child>\r\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\r\n * )} InternalAncestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Tree extends UnistParent\r\n *     ? Depth extends Max\r\n *       ? Tree\r\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\r\n *     : Tree\r\n * )} InclusiveDescendant\r\n *   Collect all (inclusive) descendants of `Tree`.\r\n *\r\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\r\n *   > recurse without actually running into an infinite loop, which the\r\n *   > previous version did.\r\n *   >\r\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\r\n *   > passed, but it doesn’t improve performance.\r\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\r\n *   > Using up to `10` doesn’t hurt or help either.\r\n * @template {UnistNode} Tree\r\n *   Tree type.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {'skip' | boolean} Action\r\n *   Union of the action types.\r\n *\r\n * @typedef {number} Index\r\n *   Move to the sibling at `index` next (after node itself is completely\r\n *   traversed).\r\n *\r\n *   Useful if mutating the tree, such as removing the node the visitor is\r\n *   currently on, or any of its previous siblings.\r\n *   Results less than 0 or greater than or equal to `children.length` stop\r\n *   traversing the parent.\r\n *\r\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\r\n *   List with one or two values, the first an action, the second an index.\r\n *\r\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\r\n *   Any value that can be returned from a visitor.\r\n */\r\n\r\n/**\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform the parent of node (the last of `ancestors`).\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of an ancestor still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Array<VisitedParents>} ancestors\r\n *   Ancestors of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n * @template {UnistNode} [Visited=UnistNode]\r\n *   Visited node type.\r\n * @template {UnistParent} [VisitedParents=UnistParent]\r\n *   Ancestor type.\r\n */\r\n\r\n/**\r\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parents`.\r\n * @template {UnistNode} [Tree=UnistNode]\r\n *   Tree type.\r\n * @template {Test} [Check=Test]\r\n *   Test type.\r\n */\r\n\r\nimport {convert} from 'unist-util-is'\r\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\r\n\r\n/** @type {Readonly<ActionTuple>} */\r\nconst empty = []\r\n\r\n/**\r\n * Continue traversing as normal.\r\n */\r\nexport const CONTINUE = true\r\n\r\n/**\r\n * Stop traversing immediately.\r\n */\r\nexport const EXIT = false\r\n\r\n/**\r\n * Do not traverse this node’s children.\r\n */\r\nexport const SKIP = 'skip'\r\n\r\n/**\r\n * Visit nodes, with ancestral information.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} check\r\n * @param {BuildVisitor<Tree, Check>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {BuildVisitor<Tree>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @param {UnistNode} tree\r\n *   Tree to traverse.\r\n * @param {Visitor | Test} test\r\n *   `unist-util-is`-compatible test\r\n * @param {Visitor | boolean | null | undefined} [visitor]\r\n *   Handle each node.\r\n * @param {boolean | null | undefined} [reverse]\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @template {UnistNode} Tree\r\n *   Node type.\r\n * @template {Test} Check\r\n *   `unist-util-is`-compatible test.\r\n */\r\nexport function visitParents(tree, test, visitor, reverse) {\r\n  /** @type {Test} */\r\n  let check\r\n\r\n  if (typeof test === 'function' && typeof visitor !== 'function') {\r\n    reverse = visitor\r\n    // @ts-expect-error no visitor given, so `visitor` is test.\r\n    visitor = test\r\n  } else {\r\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\r\n    check = test\r\n  }\r\n\r\n  const is = convert(check)\r\n  const step = reverse ? -1 : 1\r\n\r\n  factory(tree, undefined, [])()\r\n\r\n  /**\r\n   * @param {UnistNode} node\r\n   * @param {number | undefined} index\r\n   * @param {Array<UnistParent>} parents\r\n   */\r\n  function factory(node, index, parents) {\r\n    const value = /** @type {Record<string, unknown>} */ (\r\n      node && typeof node === 'object' ? node : {}\r\n    )\r\n\r\n    if (typeof value.type === 'string') {\r\n      const name =\r\n        // `hast`\r\n        typeof value.tagName === 'string'\r\n          ? value.tagName\r\n          : // `xast`\r\n          typeof value.name === 'string'\r\n          ? value.name\r\n          : undefined\r\n\r\n      Object.defineProperty(visit, 'name', {\r\n        value:\r\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\r\n      })\r\n    }\r\n\r\n    return visit\r\n\r\n    function visit() {\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let result = empty\r\n      /** @type {Readonly<ActionTuple>} */\r\n      let subresult\r\n      /** @type {number} */\r\n      let offset\r\n      /** @type {Array<UnistParent>} */\r\n      let grandparents\r\n\r\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\r\n        // @ts-expect-error: `visitor` is now a visitor.\r\n        result = toResult(visitor(node, parents))\r\n\r\n        if (result[0] === EXIT) {\r\n          return result\r\n        }\r\n      }\r\n\r\n      if ('children' in node && node.children) {\r\n        const nodeAsParent = /** @type {UnistParent} */ (node)\r\n\r\n        if (nodeAsParent.children && result[0] !== SKIP) {\r\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\r\n          grandparents = parents.concat(nodeAsParent)\r\n\r\n          while (offset > -1 && offset < nodeAsParent.children.length) {\r\n            const child = nodeAsParent.children[offset]\r\n\r\n            subresult = factory(child, offset, grandparents)()\r\n\r\n            if (subresult[0] === EXIT) {\r\n              return subresult\r\n            }\r\n\r\n            offset =\r\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\r\n          }\r\n        }\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Turn a return value into a clean result.\r\n *\r\n * @param {VisitorResult} value\r\n *   Valid return values from visitors.\r\n * @returns {Readonly<ActionTuple>}\r\n *   Clean result.\r\n */\r\nfunction toResult(value) {\r\n  if (Array.isArray(value)) {\r\n    return value\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return [CONTINUE, value]\r\n  }\r\n\r\n  return value === null || value === undefined ? empty : [value]\r\n}\r\n", "/**\r\n * @typedef {import('unist').Node} UnistNode\r\n * @typedef {import('unist').Parent} UnistParent\r\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\r\n */\r\n\r\n/**\r\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\r\n *   Test from `unist-util-is`.\r\n *\r\n *   Note: we have remove and add `undefined`, because otherwise when generating\r\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\r\n *   which doesn’t work when publishing on npm.\r\n */\r\n\r\n// To do: use types from `unist-util-visit-parents` when it’s released.\r\n\r\n/**\r\n * @typedef {(\r\n *   Fn extends (value: any) => value is infer Thing\r\n *   ? Thing\r\n *   : Fallback\r\n * )} Predicate\r\n *   Get the value of a type guard `Fn`.\r\n * @template Fn\r\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\r\n * @template Fallback\r\n *   Value to yield if `Fn` is not a type guard.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends null | undefined // No test.\r\n *   ? Value\r\n *   : Value extends {type: Check} // String (type) test.\r\n *   ? Value\r\n *   : Value extends Check // Partial test.\r\n *   ? Value\r\n *   : Check extends Function // Function test.\r\n *   ? Predicate<Check, Value> extends Value\r\n *     ? Predicate<Check, Value>\r\n *     : never\r\n *   : never // Some other test?\r\n * )} MatchesOne\r\n *   Check whether a node matches a primitive check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Check extends Array<any>\r\n *   ? MatchesOne<Value, Check[keyof Check]>\r\n *   : MatchesOne<Value, Check>\r\n * )} Matches\r\n *   Check whether a node matches a check in the type system.\r\n * @template Value\r\n *   Value; typically unist `Node`.\r\n * @template Check\r\n *   Value; typically `unist-util-is`-compatible test.\r\n */\r\n\r\n/**\r\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\r\n *   Number; capped reasonably.\r\n */\r\n\r\n/**\r\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\r\n *   Increment a number in the type system.\r\n * @template {Uint} [I=0]\r\n *   Index.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Node extends UnistParent\r\n *   ? Node extends {children: Array<infer Children>}\r\n *     ? Child extends Children ? Node : never\r\n *     : never\r\n *   : never\r\n * )} InternalParent\r\n *   Collect nodes that can be parents of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\r\n *   Collect nodes in `Tree` that can be parents of `Child`.\r\n * @template {UnistNode} Tree\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Depth extends Max\r\n *   ? never\r\n *   :\r\n *     | InternalParent<Node, Child>\r\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\r\n * )} InternalAncestor\r\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\r\n * @template {UnistNode} Node\r\n *   All node types in a tree.\r\n * @template {UnistNode} Child\r\n *   Node to search for.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   Tree extends UnistParent\r\n *     ? Depth extends Max\r\n *       ? Tree\r\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\r\n *     : Tree\r\n * )} InclusiveDescendant\r\n *   Collect all (inclusive) descendants of `Tree`.\r\n *\r\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\r\n *   > recurse without actually running into an infinite loop, which the\r\n *   > previous version did.\r\n *   >\r\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\r\n *   > passed, but it doesn’t improve performance.\r\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\r\n *   > Using up to `10` doesn’t hurt or help either.\r\n * @template {UnistNode} Tree\r\n *   Tree type.\r\n * @template {Uint} [Max=10]\r\n *   Max; searches up to this depth.\r\n * @template {Uint} [Depth=0]\r\n *   Current depth.\r\n */\r\n\r\n/**\r\n * @callback Visitor\r\n *   Handle a node (matching `test`, if given).\r\n *\r\n *   Visitors are free to transform `node`.\r\n *   They can also transform `parent`.\r\n *\r\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\r\n *   descendants to be walked (which is a bug).\r\n *\r\n *   When adding or removing previous siblings of `node` (or next siblings, in\r\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\r\n *   sibling to traverse after `node` is traversed.\r\n *   Adding or removing next siblings of `node` (or previous siblings, in case\r\n *   of reverse) is handled as expected without needing to return a new `Index`.\r\n *\r\n *   Removing the children property of `parent` still results in them being\r\n *   traversed.\r\n * @param {Visited} node\r\n *   Found node.\r\n * @param {Visited extends UnistNode ? number | undefined : never} index\r\n *   Index of `node` in `parent`.\r\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\r\n *   Parent of `node`.\r\n * @returns {VisitorResult}\r\n *   What to do next.\r\n *\r\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\r\n *   An `Action` is treated as a tuple of `[Action]`.\r\n *\r\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\r\n *   When the `Action` is `EXIT`, that action can be returned.\r\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\r\n * @template {UnistNode} [Visited=UnistNode]\r\n *   Visited node type.\r\n * @template {UnistParent} [Ancestor=UnistParent]\r\n *   Ancestor type.\r\n */\r\n\r\n/**\r\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\r\n *   Build a typed `Visitor` function from a node and all possible parents.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} Visited\r\n *   Node type.\r\n * @template {UnistParent} Ancestor\r\n *   Parent type.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   BuildVisitorFromMatch<\r\n *     Matches<Descendant, Check>,\r\n *     Extract<Descendant, UnistParent>\r\n *   >\r\n * )} BuildVisitorFromDescendants\r\n *   Build a typed `Visitor` function from a list of descendants and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} Descendant\r\n *   Node type.\r\n * @template {Test} Check\r\n *   Test type.\r\n */\r\n\r\n/**\r\n * @typedef {(\r\n *   BuildVisitorFromDescendants<\r\n *     InclusiveDescendant<Tree>,\r\n *     Check\r\n *   >\r\n * )} BuildVisitor\r\n *   Build a typed `Visitor` function from a tree and a test.\r\n *\r\n *   It will infer which values are passed as `node` and which as `parent`.\r\n * @template {UnistNode} [Tree=UnistNode]\r\n *   Node type.\r\n * @template {Test} [Check=Test]\r\n *   Test type.\r\n */\r\n\r\nimport {visitParents} from 'unist-util-visit-parents'\r\n\r\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\r\n\r\n/**\r\n * Visit nodes.\r\n *\r\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\r\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\r\n *\r\n * You can choose for which nodes `visitor` is called by passing a `test`.\r\n * For complex tests, you should test yourself in `visitor`, as it will be\r\n * faster and will have improved type information.\r\n *\r\n * Walking the tree is an intensive task.\r\n * Make use of the return values of the visitor when possible.\r\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\r\n * to check if a node matches, and then perform different operations.\r\n *\r\n * You can change the tree.\r\n * See `Visitor` for more info.\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {Check} check\r\n * @param {BuildVisitor<Tree, Check>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @overload\r\n * @param {Tree} tree\r\n * @param {BuildVisitor<Tree>} visitor\r\n * @param {boolean | null | undefined} [reverse]\r\n * @returns {undefined}\r\n *\r\n * @param {UnistNode} tree\r\n *   Tree to traverse.\r\n * @param {Visitor | Test} testOrVisitor\r\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\r\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\r\n *   Handle each node (when test is omitted, pass `reverse`).\r\n * @param {boolean | null | undefined} [maybeReverse=false]\r\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\r\n * @returns {undefined}\r\n *   Nothing.\r\n *\r\n * @template {UnistNode} Tree\r\n *   Node type.\r\n * @template {Test} Check\r\n *   `unist-util-is`-compatible test.\r\n */\r\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\r\n  /** @type {boolean | null | undefined} */\r\n  let reverse\r\n  /** @type {Test} */\r\n  let test\r\n  /** @type {Visitor} */\r\n  let visitor\r\n\r\n  if (\r\n    typeof testOrVisitor === 'function' &&\r\n    typeof visitorOrReverse !== 'function'\r\n  ) {\r\n    test = undefined\r\n    visitor = testOrVisitor\r\n    reverse = visitorOrReverse\r\n  } else {\r\n    // @ts-expect-error: assume the overload with test was given.\r\n    test = testOrVisitor\r\n    // @ts-expect-error: assume the overload with test was given.\r\n    visitor = visitorOrReverse\r\n    reverse = maybeReverse\r\n  }\r\n\r\n  visitParents(tree, test, overload, reverse)\r\n\r\n  /**\r\n   * @param {UnistNode} node\r\n   * @param {Array<UnistParent>} parents\r\n   */\r\n  function overload(node, parents) {\r\n    const parent = parents[parents.length - 1]\r\n    const index = parent ? parent.children.indexOf(node) : undefined\r\n    return visitor(node, index, parent)\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["index", "is", "visit"]
}
